// Mocks generated by Mockito 5.4.3 from annotations
// in clean_architecture_getx/test/features/user/presentation/controller/user_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:clean_architecture_getx/features/user/data/models/user.dart'
    as _i6;
import 'package:clean_architecture_getx/features/user/domain/repositories/user_repository.dart'
    as _i2;
import 'package:clean_architecture_getx/features/user/domain/usecases/create_user_usecase.dart'
    as _i7;
import 'package:clean_architecture_getx/features/user/domain/usecases/delete_user_usecase.dart'
    as _i9;
import 'package:clean_architecture_getx/features/user/domain/usecases/get_users_usecase.dart'
    as _i4;
import 'package:clean_architecture_getx/features/user/domain/usecases/update_user_usecase.dart'
    as _i8;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserRepository_0 extends _i1.SmartFake
    implements _i2.UserRepository {
  _FakeUserRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetUsersUseCase].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockGetUsersUseCase extends _i1.Mock implements _i4.GetUsersUseCase {
  MockGetUsersUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserRepository get userRepository => (super.noSuchMethod(
        Invocation.getter(#userRepository),
        returnValue: _FakeUserRepository_0(
          this,
          Invocation.getter(#userRepository),
        ),
      ) as _i2.UserRepository);

  @override
  _i5.Future<_i3.Either<String, List<_i6.User>>> call(
          _i4.GetUsersParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<String, List<_i6.User>>>.value(
            _FakeEither_1<String, List<_i6.User>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<String, List<_i6.User>>>);
}

/// A class which mocks [CreateUserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockCreateUserUseCase extends _i1.Mock implements _i7.CreateUserUseCase {
  MockCreateUserUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserRepository get userRepository => (super.noSuchMethod(
        Invocation.getter(#userRepository),
        returnValue: _FakeUserRepository_0(
          this,
          Invocation.getter(#userRepository),
        ),
      ) as _i2.UserRepository);

  @override
  _i5.Future<_i3.Either<String, bool>> call(_i7.CreateUserParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<String, bool>>.value(
            _FakeEither_1<String, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<String, bool>>);
}

/// A class which mocks [UpdateUserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockUpdateUserUseCase extends _i1.Mock implements _i8.UpdateUserUseCase {
  MockUpdateUserUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserRepository get userRepository => (super.noSuchMethod(
        Invocation.getter(#userRepository),
        returnValue: _FakeUserRepository_0(
          this,
          Invocation.getter(#userRepository),
        ),
      ) as _i2.UserRepository);

  @override
  _i5.Future<_i3.Either<String, bool>> call(_i8.UpdateUserParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<String, bool>>.value(
            _FakeEither_1<String, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<String, bool>>);
}

/// A class which mocks [DeleteUserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockDeleteUserUseCase extends _i1.Mock implements _i9.DeleteUserUseCase {
  MockDeleteUserUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserRepository get userRepository => (super.noSuchMethod(
        Invocation.getter(#userRepository),
        returnValue: _FakeUserRepository_0(
          this,
          Invocation.getter(#userRepository),
        ),
      ) as _i2.UserRepository);

  @override
  _i5.Future<_i3.Either<String, bool>> call(_i9.DeleteUserParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<String, bool>>.value(
            _FakeEither_1<String, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<String, bool>>);
}
