// Mocks generated by Mockito 5.4.3 from annotations
// in clean_architecture_getx/test/features/comment/presentation/controller/comment_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:clean_architecture_getx/features/comment/data/models/comment.dart'
    as _i6;
import 'package:clean_architecture_getx/features/comment/domain/repositories/comment_repository.dart'
    as _i2;
import 'package:clean_architecture_getx/features/comment/domain/usecases/create_comment_usecase.dart'
    as _i7;
import 'package:clean_architecture_getx/features/comment/domain/usecases/delete_comment_usecase.dart'
    as _i8;
import 'package:clean_architecture_getx/features/comment/domain/usecases/get_comments_usecase.dart'
    as _i4;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCommentRepository_0 extends _i1.SmartFake
    implements _i2.CommentRepository {
  _FakeCommentRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetCommentsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockGetCommentsUseCase extends _i1.Mock
    implements _i4.GetCommentsUseCase {
  MockGetCommentsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CommentRepository get commentRepository => (super.noSuchMethod(
        Invocation.getter(#commentRepository),
        returnValue: _FakeCommentRepository_0(
          this,
          Invocation.getter(#commentRepository),
        ),
      ) as _i2.CommentRepository);

  @override
  _i5.Future<_i3.Either<String, List<_i6.Comment>>> call(
          _i4.GetCommentsParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<String, List<_i6.Comment>>>.value(
            _FakeEither_1<String, List<_i6.Comment>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<String, List<_i6.Comment>>>);
}

/// A class which mocks [CreateCommentUseCase].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockCreateCommentUseCase extends _i1.Mock
    implements _i7.CreateCommentUseCase {
  MockCreateCommentUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CommentRepository get commentRepository => (super.noSuchMethod(
        Invocation.getter(#commentRepository),
        returnValue: _FakeCommentRepository_0(
          this,
          Invocation.getter(#commentRepository),
        ),
      ) as _i2.CommentRepository);

  @override
  _i5.Future<_i3.Either<String, bool>> call(_i7.CreateCommentParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<String, bool>>.value(
            _FakeEither_1<String, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<String, bool>>);
}

/// A class which mocks [DeleteCommentUseCase].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockDeleteCommentUseCase extends _i1.Mock
    implements _i8.DeleteCommentUseCase {
  MockDeleteCommentUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CommentRepository get commentRepository => (super.noSuchMethod(
        Invocation.getter(#commentRepository),
        returnValue: _FakeCommentRepository_0(
          this,
          Invocation.getter(#commentRepository),
        ),
      ) as _i2.CommentRepository);

  @override
  _i5.Future<_i3.Either<String, bool>> call(_i8.DeleteCommentParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<String, bool>>.value(
            _FakeEither_1<String, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<String, bool>>);
}
