// Mocks generated by Mockito 5.4.3 from annotations
// in clean_architecture_getx/test/features/todo/presentation/controller/todo_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:clean_architecture_getx/features/todo/data/models/todo.dart'
    as _i9;
import 'package:clean_architecture_getx/features/todo/domain/repositories/todo_repository.dart'
    as _i2;
import 'package:clean_architecture_getx/features/todo/domain/usecases/create_todo_usecase.dart'
    as _i4;
import 'package:clean_architecture_getx/features/todo/domain/usecases/delete_todo_usecase.dart'
    as _i7;
import 'package:clean_architecture_getx/features/todo/domain/usecases/get_todos_usecase.dart'
    as _i8;
import 'package:clean_architecture_getx/features/todo/domain/usecases/update_todo_usecase.dart'
    as _i6;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTodoRepository_0 extends _i1.SmartFake
    implements _i2.TodoRepository {
  _FakeTodoRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CreateTodoUseCase].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockCreateTodoUseCase extends _i1.Mock implements _i4.CreateTodoUseCase {
  MockCreateTodoUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TodoRepository get todoRepository => (super.noSuchMethod(
        Invocation.getter(#todoRepository),
        returnValue: _FakeTodoRepository_0(
          this,
          Invocation.getter(#todoRepository),
        ),
      ) as _i2.TodoRepository);

  @override
  _i5.Future<_i3.Either<String, bool>> call(_i4.CreateTodoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<String, bool>>.value(
            _FakeEither_1<String, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<String, bool>>);
}

/// A class which mocks [UpdateTodoUseCase].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockUpdateTodoUseCase extends _i1.Mock implements _i6.UpdateTodoUseCase {
  MockUpdateTodoUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TodoRepository get todoRepository => (super.noSuchMethod(
        Invocation.getter(#todoRepository),
        returnValue: _FakeTodoRepository_0(
          this,
          Invocation.getter(#todoRepository),
        ),
      ) as _i2.TodoRepository);

  @override
  _i5.Future<_i3.Either<String, bool>> call(_i6.UpdateTodoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<String, bool>>.value(
            _FakeEither_1<String, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<String, bool>>);
}

/// A class which mocks [DeleteTodoUseCase].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockDeleteTodoUseCase extends _i1.Mock implements _i7.DeleteTodoUseCase {
  MockDeleteTodoUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TodoRepository get todoRepository => (super.noSuchMethod(
        Invocation.getter(#todoRepository),
        returnValue: _FakeTodoRepository_0(
          this,
          Invocation.getter(#todoRepository),
        ),
      ) as _i2.TodoRepository);

  @override
  _i5.Future<_i3.Either<String, bool>> call(_i7.DeleteTodoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<String, bool>>.value(
            _FakeEither_1<String, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<String, bool>>);
}

/// A class which mocks [GetTodoUseCase].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockGetTodoUseCase extends _i1.Mock implements _i8.GetTodoUseCase {
  MockGetTodoUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TodoRepository get todoRepository => (super.noSuchMethod(
        Invocation.getter(#todoRepository),
        returnValue: _FakeTodoRepository_0(
          this,
          Invocation.getter(#todoRepository),
        ),
      ) as _i2.TodoRepository);

  @override
  _i5.Future<_i3.Either<String, List<_i9.ToDo>>> call(
          _i8.GetTodoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<String, List<_i9.ToDo>>>.value(
            _FakeEither_1<String, List<_i9.ToDo>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<String, List<_i9.ToDo>>>);
}
